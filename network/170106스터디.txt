1. 하드링크와 심볼릭 링크의 차이점

	먼저 둘의 차이점에 대해서 알아보기전에 서로 다른 링크의 특징에 대해서 알아보자.

-하드링크

하드링크와 심볼릭링크(심링크, 소프트링크)의 차이점은 상당히 크다.
하드링크는 이름만 다른 복사본이 아니라 서로 다른 이름을 가지면서
해당 메모리를 참조하고 있는 '같은 파일'이다. 

하드링크를 자세하게 까보면 같은 아이노드를 가지며 하드링크를 아무리 많이 생성해도 메모리를 원본의 n배 차지하지는 않는다. 
또한 ls -la 명령을 내려도 이 파일이 하드링크인지, 원본 파일인지 구별할수 없다.
반드시 -i옵션을 추가로 적용하여 같은 아이노드임을 확인해야만 이를 알 수 있다.

또한 하드링크는 유연성이 상당히 떨어지는데, 예를 들어 데이터 X를 참조하는 하드링크 X-a와 X-b가 있다고 하자.
이 때, 어느 하드링크로든 접근하여 파일을 수정하면 그 다음 X-a든 X-b로 접근하건간에 둘은 같은 내용을 참조하기에 둘의 내용은 전부 바뀌게 된다.

이런 특징 때문에 하드링크가 전부다 제거되어 참조가 유실되어야 비로소 파일이 삭제되었다고 할 수 있다.

그림 

X-a -> X
       ^
   X-b |

-심볼릭 링크
심볼릭 링크는 이보다 훨씬 유연한 구조를 가지고 있는데, 가장 좋은 비유는 바로 프로그래밍 언어의 포인터 개념을 생각하면 제일 좋을 것 같다.

심볼릭 링크는 하드 링크와는 달리 원본과 다른 아이노드를 가지며, 언제든지 참조하고 있는 파일을 바꿀수 있다 즉, 포인터와 비슷하게 주소에 의존하지 않고 그 안에 들어있는 값에 의존하게 된다. 

따라서 심볼릭 링크가 가지고 있는 정보는 파일이 어디에 있는지에 대한 위치 정보일 뿐이다. 그리고 사용자가 파일을 요청하면 자신의 데이터를 가진 파일에서 데이터를 가져와서 필요한 사용자에게 전달한다.

2. inode에 대한 자세한 설명과 소스코드

파일의 부가적인 정보나 속성을 저장하고 있으며 실제 파일의 데이터 블록이 어떤 것인지를 지정하고 있다. 따라서 파일의 이름과 상관없이 i-node가 같으면 같은 속성을 가지고 있고 실제 파일의 데이터도 동일하다.

하나의 i-node에 여러 파일의 이름이 연결되어 있으면 이름은 서로 달라도 완전히 동일한 파일의 내용을 가진다. 모든 파일의 속성에는 현재 파일이 서로 다른 이름으로 몇개가 존재하는가를 나타내는 링크 카운트가 있다. 처음 파일을 생성하면 이 값은 1이 된다. 링크 카운트가 3의 값을 가진다면 똑같은 i-node와 데이터 블록을 가진 파일이 서로 다른 이름으로 세개가 존재하게 되는것이다.

3.  type과 file 그리고 whatis의 정확한 차이점

type은 지정된 명령어가 쉘에 내장된 명령어인지, 외부명령어인지, 앨리어스 명령어인지 등을 확인하는 명령어이다.

type <command>

file은 지정된 파일의 종류(타입)을 확인하는 명령어이다. file은 /usr/share/file 디렉토리의 magic 파일을 참조하여 파일종류를 표시해준다.
file <filename>

whatis는 이름을 받아서 해당하는 man페이지가 있는지 없는지 찾아 간단한 한줄 설명과 man페이지로의 안내를 출력한다.
whatis는 whatis 자신의 데이터베이스 파일을 검색하여 그 결과를 터미널에 보여준다.

apropos와 다른점은 완전히 이름이 일치해야만 보여주며, whatis는 한 줄만 보여준다. 

whatis <name>

4.  bash에서 사용하는 와일드카드 몇가지 암기

* 모든 문자
? 모든 하나의 문자
[characters] characters 문자셋에 포함된 문자
[!characters] characters 문자셋에 포함되지 않은 문자
[[:class]] 지정된 문자 클래스에 포함된 문자

문자 클래스
[:alnum:] 모든 알파벳과 숫자 문자
[:alpha:] 모든 알파벳 문자
[:digit:] 모든 숫자
[:lower:] 모든 소문자
[:upper:] 모든 대문자

예제
* 모든 파일
g* 		: g로 시작하는 모든 파일
b*.txt  : b로 시작하되 .txt형식 파일
Data??? : Data로 시작하면서 뒤에 정확히 3개의 문자만 있는 파일
[abc]*	: a, b, c로 시작하는 모든 파일
BACKUP.[0-9][0-9][0-9] : BACKUP으로 시작하면서 뒤에 정확히 3개의 숫자만 있는 파일
[[:upper:]]*	: 대문자로 시작하는 모든 파일
[^[:digit:]]*	: 숫자로 시작하지 않는 모든파일 
*[[:lower:]123]	: 파일면이 소문자로 끝나거나 1, 2, 3으로 끝나는 파일

